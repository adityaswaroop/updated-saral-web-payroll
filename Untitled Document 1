 describe "generation of formula" do
   before :each do
     @basic = FactoryGirl.create(:salary_head)
     @da = FactoryGirl.create(:salary_head, head_name: "DA", short_name: "DA", salary_type: "Earnings")
     @hra = FactoryGirl.create(:salary_head, head_name: "HRA", short_name: "HRA", salary_type: "Earnings")
     salary_group = FactoryGirl.create(:salary_group, based_on_gross: true)

     @basic_detail = FactoryGirl.create(:salary_group_detail, salary_group_id: salary_group.id, salary_head_id: @basic.id, calc_type: "Formula", calculation: "GROSS * 40/100")	
     @hra_detail = FactoryGirl.create(:salary_group_detail, salary_group_id: salary_group.id, salary_head_id: @hra.id, calc_type: "Formula", calculation: "(BASIC + DA) * 30/100")
     @employee_detail = FactoryGirl.create(:employee_detail, salary_group_id: salary_group.id)
   end

   it "should give nested formula" do
	 da_detail = FactoryGirl.create(:salary_group_detail, salary_group_id: salary_group.id, salary_head_id: @da.id, calc_type: "Formula", calculation: "GROSS * 20/100")
     hra_allotted = FactoryGirl.create(:salary_allotment, :salary_group_detail_id => @hra_detail.id,
                                       salary_head_id: @hra.id,
                                       employee_detail_id: @employee_detail.id)
     formula = hra_allotted.generated_formula
     formula.should eq("( (GROSS * 40/100) + (GROSS * 20/100) ) * 30/100")
   end

 def generated_formula
   formula = self.salary_group_detail.calculation
   variables = formula.scan /\b([A-Z_]+)\b/
   salary_group_details = SalaryGroupDetail.where(:salary_group_id => self.salary_group_detail.salary_group_id)
   variables.each do |variable|
     salary_group_detail = salary_group_details.select {|sg| sg.salary_head.short_name == variable.first}.first
     unless salary_group_detail.nil?
       sub_formula = (salary_group_detail.calc_type == 'Formula') ? salary_group_detail.calculation : 0
       formula.gsub! Regexp.new(variable.first), sub_formula
     end
   end
   formula
 end
